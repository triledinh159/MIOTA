Index: app/src/main/java/com/example/miotav1/Home.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.miotav1;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.ActionBarDrawerToggle;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.view.GravityCompat;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.os.AsyncTask;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.amplifyframework.auth.cognito.result.AWSCognitoAuthSignOutResult;\r\nimport com.amplifyframework.auth.cognito.result.GlobalSignOutError;\r\nimport com.amplifyframework.auth.cognito.result.HostedUIError;\r\nimport com.amplifyframework.auth.cognito.result.RevokeTokenError;\r\nimport com.amplifyframework.core.Amplify;\r\n\r\n\r\nimport org.apache.commons.io.FileUtils;\r\nimport org.eclipse.paho.android.service.MqttAndroidClient;\r\nimport org.eclipse.paho.client.mqttv3.IMqttActionListener;\r\nimport org.eclipse.paho.client.mqttv3.IMqttToken;\r\n//import org.eclipse.paho.client.mqttv3.MqttClient;\r\nimport org.eclipse.paho.client.mqttv3.MqttCallback;\r\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\r\nimport org.eclipse.paho.client.mqttv3.MqttException;\r\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport com.google.android.material.navigation.NavigationView;\r\nimport com.hivemq.client.mqtt.MqttClient;\r\nimport com.hivemq.client.mqtt.MqttGlobalPublishFilter;\r\nimport com.hivemq.client.mqtt.datatypes.MqttQos;\r\nimport com.hivemq.client.mqtt.mqtt5.Mqtt5BlockingClient;\r\nimport com.hivemq.client.mqtt.mqtt5.message.publish.Mqtt5Publish;\r\n\r\nimport static com.hivemq.client.mqtt.MqttGlobalPublishFilter.ALL;\r\nimport static java.nio.charset.StandardCharsets.UTF_8;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\n\r\n\r\nclass MqttMessageReceiver extends AsyncTask<Void, String, Void> {\r\n\r\n    private Mqtt5BlockingClient mqttClient;\r\n    private DeviceAdapter deviceAdapter;\r\n    public ArrayList<Device> deviceList;\r\n\r\n    MqttMessageReceiver(Mqtt5BlockingClient mqttClient, DeviceAdapter deviceAdapter, ArrayList<Device> deviceList) {\r\n        this.mqttClient = mqttClient;\r\n        this.deviceAdapter = deviceAdapter;\r\n        this.deviceList = deviceList;\r\n    }\r\n\r\n    @Override\r\n    protected Void doInBackground(Void... params) {\r\n        try (final Mqtt5BlockingClient.Mqtt5Publishes publishes = mqttClient.publishes(MqttGlobalPublishFilter.ALL)) {\r\n            while (!isCancelled()) {  // Check if the task is cancelled\r\n                Optional<Mqtt5Publish> message = publishes.receive(10, TimeUnit.SECONDS);\r\n                if (message.isPresent()) {\r\n                    String receivedMessage = new String(message.get().getPayloadAsBytes(), UTF_8);\r\n                    String topic = message.get().getTopic().toString();\r\n\r\n                    for (int i = 0; i < deviceList.size(); i++) {\r\n                        Device device = deviceList.get(i);\r\n                        Log.d(\"mqtt-tri_SIZELIST\", String.valueOf(deviceList.size()));\r\n                        Log.d(\"mqtt-triGETNAMEDIVICE\", device.getName());\r\n                        if (device.getTopic().equals(topic)) {\r\n                            publishProgress(receivedMessage);  // Trigger onProgressUpdate\r\n                            device.updateStatisticValue(receivedMessage);\r\n                        }\r\n                    }\r\n                } else {\r\n                    Log.d(\"mqtt-tri\", \"No message received within the specified time.\");\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            Log.e(\"mqtt-tri\", \"Error receiving message: \" + e.getMessage());\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    protected void onProgressUpdate(String... values) {\r\n        // Update UI on the main thread\r\n        for (String receivedMessage : values) {\r\n            Log.d(\"mqtt-triReceive\", receivedMessage);\r\n            deviceAdapter.notifyDataSetChanged();\r\n        }\r\n    }\r\n}\r\n\r\n\r\npublic class Home extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {\r\n    private static final int LAYOUT_HOME = 0;\r\n    private static final int LAYOUT_ABOUT = 2;\r\n    private String host, username, password, topic;\r\n    private Mqtt5BlockingClient mqttClient;\r\n    private TextView tvReceivedMessage;\r\n\r\n    private int mCurrentLayout = LAYOUT_HOME;\r\n\r\n    private DrawerLayout mDrawerLayout;\r\n    Context context;\r\n\r\n\r\n\r\n    //Khai báo array list, adapter, với các biến để hiển thị lên màn hình homescreen và recyclerView\r\n    private ArrayList<Device> deviceList;\r\n    private DeviceAdapter deviceAdapter;\r\n    ImageView ImgBg;\r\n\r\n    TextView home_title,iot_title;\r\n    RecyclerView rcv_listDevice;\r\n    Button btnAdd;\r\n\r\n    Device added_device;\r\n\r\n    private static final int REQUEST_CODE_ADD_ITEM = 1;\r\n\r\n    //\r\n\r\n\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n\r\n        mDrawerLayout = findViewById(R.id.drawerLayout);\r\n        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, mDrawerLayout, toolbar, R.string.nav_drawer_open, R.string.nav_drawer_close);\r\n        mDrawerLayout.addDrawerListener(toggle);\r\n        toggle.syncState();\r\n\r\n        NavigationView navigationView = findViewById(R.id.navigation_view);\r\n        navigationView.setNavigationItemSelectedListener(this);\r\n\r\n        FrameLayout frameLayout = findViewById(R.id.content_frame);\r\n        frameLayout.removeAllViews();  // Xóa tất cả các views hiện tại trong FrameLayout\r\n        View inflatedView = getLayoutInflater().inflate(R.layout.activity_home_screen, frameLayout, true);\r\n\r\n\r\n        tvReceivedMessage = findViewById(R.id.tvReceivedMessage);\r\n\r\n        try{\r\n            getInfo();\r\n        } catch (Exception e){\r\n            Log.e(\"mqtt-tri\", \"errrrrrrrrr\");\r\n        }\r\n\r\n        //\r\n        //setContentView(R.layout.activity_home_screen);\r\n        deviceList = new ArrayList<>();\r\n        deviceAdapter = new DeviceAdapter(this, deviceList);\r\n        ImgBg = (ImageView) findViewById(R.id.bgimage);\r\n        rcv_listDevice = (RecyclerView) findViewById(R.id.recycleList);\r\n        rcv_listDevice.setLayoutManager(new LinearLayoutManager(this));\r\n        rcv_listDevice.setAdapter(deviceAdapter);\r\n        btnAdd = (Button) findViewById(R.id.addButton);\r\n        btnAdd.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent intent = new Intent(Home.this, AddDevice.class);\r\n                startActivityForResult(intent, REQUEST_CODE_ADD_ITEM);\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data){\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == REQUEST_CODE_ADD_ITEM && data != null) {\r\n            Device newDevice = (Device) data.getSerializableExtra(\"new_Device\");\r\n            added_device = newDevice;\r\n            deviceList.add(newDevice);\r\n            deviceAdapter.notifyDataSetChanged();\r\n            //subscribeToTopics(deviceList, );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void getInfo() throws InterruptedException {\r\n        try {\r\n\r\n            File exampleFile = new File(getApplicationContext().getFilesDir(), \"user.json\");\r\n            Amplify.Storage.downloadFile(\r\n                    \"user.json\",\r\n                    exampleFile,\r\n                    result -> {\r\n                        Log.i(\"MyAmplifyApp\", \"Successfully downloaded: \" + result.getFile().getName());\r\n                        try {\r\n                            String jsonString = FileUtils.readFileToString(result.getFile(), StandardCharsets.UTF_8);\r\n                            processConfig(jsonString);\r\n                            Log.d(\"mqtt-tri\", \"read\" + jsonString);\r\n                        } catch (IOException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n\r\n\r\n                    },\r\n                    error -> Log.e(\"MyAmplifyApp\",  \"Download Failure\", error)\r\n            );\r\n        } catch(Exception error) {\r\n            Log.e(\"MyAmplifyApp\", \"Download Failure\", error);\r\n        }\r\n    }\r\n    private void processConfig(String jsonString) {\r\n        try {\r\n            JSONObject configObject = new JSONObject(jsonString);\r\n            JSONArray devicesArray = configObject.getJSONArray(\"devices\");\r\n            List<String> topics = new ArrayList<>();\r\n\r\n            for (int i = 0; i < devicesArray.length(); i++) {\r\n                JSONObject deviceObject = devicesArray.getJSONObject(i);\r\n                String topic = deviceObject.getString(\"topic\");\r\n                topics.add(topic);\r\n                Log.d(\"mqtt-tri\", topic);\r\n                String typeDevice = (deviceObject.isNull(\"type\")) ? \"\" : deviceObject.getString(\"type\");\r\n                String device = (deviceObject.isNull(\"device\")) ? \"\" : deviceObject.getString(\"device\");\r\n                String name = (deviceObject.isNull(\"name\")) ? \"\" : deviceObject.getString(\"name\");\r\n                Device newDevice = new Device(typeDevice,device, topic, name);\r\n\r\n                deviceList.add(newDevice);\r\n\r\n                deviceAdapter.notifyDataSetChanged();\r\n\r\n\r\n\r\n\r\n            }\r\n            subscribeToTopics(deviceList, topics);\r\n\r\n\r\n        } catch (JSONException e) {\r\n            Log.e(\"mqtt-tri\", \"Error parsing JSON: \" + e.getMessage());\r\n        }\r\n    }\r\n    private void subscribeToTopics(ArrayList<Device> deviceList,List<String> topics) {\r\n        host = \"d567f3932ca749f78c9e75dac4e4eab5.s2.eu.hivemq.cloud\";\r\n        username = \"trild\";\r\n        password = \"Tri123456\";\r\n        try {\r\n            // create an MQTT client\r\n            mqttClient = MqttClient.builder()\r\n                    .useMqttVersion5()\r\n                    .serverHost(host)\r\n                    .serverPort(8883)\r\n                    .sslWithDefaultConfig()\r\n                    .buildBlocking();\r\n\r\n            // connect to HiveMQ Cloud with TLS and username/pw\r\n            mqttClient.connectWith()\r\n                    .simpleAuth()\r\n                    .username(username)\r\n                    .password(UTF_8.encode(password))\r\n                    .applySimpleAuth()\r\n                    .send();\r\n\r\n            Log.d(\"mqtt-tri\", \"Connected successfully\");\r\n\r\n            // Subscribe to all topics\r\n            for (String topic : topics) {\r\n                mqttClient.subscribeWith()\r\n                        .topicFilter(topic)\r\n                        .send();\r\n                Log.d(\"mqtt-tri\", \"Subscribed to topic: \" + topic);\r\n            }\r\n\r\n            // Receive messages for all subscribed topics\r\n            try {\r\n                MqttMessageReceiver mqttMessageReceiver = new MqttMessageReceiver(mqttClient, deviceAdapter, deviceList);\r\n                mqttMessageReceiver.execute();\r\n                //device.updateStatisticValue(\"v4\");\r\n                // The rest of your existing code...\r\n            } catch (Exception e) {\r\n                Log.e(\"mqtt-tri\", \"er=\");\r\n            }\r\n        } catch (Exception e) {\r\n            Log.e(\"mqtt-tri\", \"Error connecting to MQTT broker: \" + e.getMessage());\r\n        }\r\n\r\n    }\r\n    // Method to handle Signout\r\n    private void signOut() {\r\n        Amplify.Auth.signOut(signOutResult -> {\r\n            if (signOutResult instanceof AWSCognitoAuthSignOutResult.CompleteSignOut) {\r\n                // Sign Out completed fully and without errors.\r\n                Log.i(\"AuthQuickStart\", \"Signed out successfully\");\r\n                //Back To Login screen\r\n                navigateToLogin();\r\n            } else if (signOutResult instanceof AWSCognitoAuthSignOutResult.PartialSignOut) {\r\n                // Sign Out completed with some errors. User is signed out of the device.\r\n                AWSCognitoAuthSignOutResult.PartialSignOut partialSignOutResult =\r\n                        (AWSCognitoAuthSignOutResult.PartialSignOut) signOutResult;\r\n\r\n                HostedUIError hostedUIError = partialSignOutResult.getHostedUIError();\r\n                if (hostedUIError != null) {\r\n                    Log.e(\"AuthQuickStart\", \"HostedUI Error\", hostedUIError.getException());\r\n                    // Optional: Re-launch hostedUIError.getUrl() in a Custom tab to clear Cognito web session.\r\n                }\r\n\r\n                GlobalSignOutError globalSignOutError = partialSignOutResult.getGlobalSignOutError();\r\n                if (globalSignOutError != null) {\r\n                    Log.e(\"AuthQuickStart\", \"GlobalSignOut Error\", globalSignOutError.getException());\r\n                    // Optional: Use escape hatch to retry revocation of globalSignOutError.getAccessToken().\r\n                }\r\n\r\n                RevokeTokenError revokeTokenError = partialSignOutResult.getRevokeTokenError();\r\n                if (revokeTokenError != null) {\r\n                    Log.e(\"AuthQuickStart\", \"RevokeToken Error\", revokeTokenError.getException());\r\n                    // Optional: Use escape hatch to retry revocation of revokeTokenError.getRefreshToken().\r\n                }\r\n            } else if (signOutResult instanceof AWSCognitoAuthSignOutResult.FailedSignOut) {\r\n                AWSCognitoAuthSignOutResult.FailedSignOut failedSignOutResult =\r\n                        (AWSCognitoAuthSignOutResult.FailedSignOut) signOutResult;\r\n                // Sign Out failed with an exception, leaving the user signed in.\r\n                Log.e(\"AuthQuickStart\", \"Sign out Failed\", failedSignOutResult.getException());\r\n            }\r\n        });\r\n    }\r\n    // Method to navigate to the Login screen\r\n    private void navigateToLogin() {\r\n        Intent intent = new Intent(this, Login.class);\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK); // Clear the back stack\r\n        startActivity(intent);\r\n        finish(); // Close the current activity (Home)\r\n    }\r\n    private boolean doubleBackToExitPressedOnce = false;\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (doubleBackToExitPressedOnce) {\r\n            finishAndRestartApp(); // Modified: finish the activity and restart the app\r\n            return;\r\n        }\r\n\r\n        this.doubleBackToExitPressedOnce = true;\r\n        Toast.makeText(this, \"Press again to exit\", Toast.LENGTH_SHORT).show();\r\n\r\n        new Handler().postDelayed(() -> doubleBackToExitPressedOnce = false, 2000);\r\n    }\r\n\r\n    private void finishAndRestartApp() {\r\n        finish(); // Finish the current activity\r\n        Intent intent = new Intent(this, MainActivity.class);\r\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);\r\n        startActivity(intent); // Restart the app by starting MainActivity\r\n        moveTaskToBack(true); // Move the task to the back of the stack\r\n        android.os.Process.killProcess(android.os.Process.myPid()); // Kill the process\r\n        System.exit(1); // Exit the app\r\n    }\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        // Disconnect the MQTT client when the activity is destroyed\r\n        if (mqttClient != null && mqttClient.getState().isConnected()) {\r\n            mqttClient.disconnect();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        int id = item.getItemId();\r\n        if (id == R.id.nav_home) {\r\n            if (mCurrentLayout != LAYOUT_HOME) {\r\n                mCurrentLayout = LAYOUT_HOME;\r\n                Intent newintent = new Intent(Home.this, Home.class);\r\n                startActivity(newintent);\r\n            }\r\n        } else if (id == R.id.nav_guide) {\r\n            // Handle guide\r\n        } else if (id == R.id.nav_about) {\r\n            if (mCurrentLayout != LAYOUT_ABOUT) {\r\n                setLayout(R.layout.activity_about);\r\n                mCurrentLayout = LAYOUT_ABOUT;\r\n            }\r\n        } else if (id == R.id.nav_logout) {\r\n            signOut();\r\n        }\r\n        mDrawerLayout.closeDrawer(GravityCompat.START);\r\n        return true;\r\n    }\r\n\r\n    private void setLayout(int layoutResId) {\r\n        FrameLayout frameLayout = findViewById(R.id.content_frame);\r\n        frameLayout.removeAllViews();\r\n\r\n        // Inflate the new layout\r\n        View inflatedView = getLayoutInflater().inflate(layoutResId, frameLayout, false);\r\n        frameLayout.addView(inflatedView);\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/miotav1/Home.java b/app/src/main/java/com/example/miotav1/Home.java
--- a/app/src/main/java/com/example/miotav1/Home.java	(revision 01f028d0516f367da13eb05f3651d78d2d267e33)
+++ b/app/src/main/java/com/example/miotav1/Home.java	(date 1705135703901)
@@ -11,6 +11,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 
 import android.annotation.SuppressLint;
+import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.Intent;
 import android.os.AsyncTask;
@@ -172,6 +173,8 @@
 
         tvReceivedMessage = findViewById(R.id.tvReceivedMessage);
 
+        showProgressDialog();
+
         try{
             getInfo();
         } catch (Exception e){
@@ -223,6 +226,7 @@
                             String jsonString = FileUtils.readFileToString(result.getFile(), StandardCharsets.UTF_8);
                             processConfig(jsonString);
                             Log.d("mqtt-tri", "read" + jsonString);
+                            dismissProgressDialog();
                         } catch (IOException e) {
                             throw new RuntimeException(e);
                         }
@@ -235,6 +239,20 @@
             Log.e("MyAmplifyApp", "Download Failure", error);
         }
     }
+    private ProgressDialog progressDialog;
+
+    private void showProgressDialog() {
+        progressDialog = new ProgressDialog(this);
+        progressDialog.setMessage("LOADING ....");
+        progressDialog.setCancelable(false); // Ngăn chặn việc đóng progress bar khi chạm vào màn hình
+        progressDialog.show();
+    }
+
+    private void dismissProgressDialog() {
+        if (progressDialog != null && progressDialog.isShowing()) {
+            progressDialog.dismiss();
+        }
+    }
     private void processConfig(String jsonString) {
         try {
             JSONObject configObject = new JSONObject(jsonString);
